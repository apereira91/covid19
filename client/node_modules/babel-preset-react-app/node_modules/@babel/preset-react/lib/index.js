"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

<<<<<<< HEAD
function _helperPluginUtils() {
  const data = require("@babel/helper-plugin-utils");

  _helperPluginUtils = function () {
    return data;
  };

  return data;
}

function _pluginTransformReactJsx() {
  const data = _interopRequireDefault(require("@babel/plugin-transform-react-jsx"));

  _pluginTransformReactJsx = function () {
    return data;
  };

  return data;
}

function _pluginTransformReactDisplayName() {
  const data = _interopRequireDefault(require("@babel/plugin-transform-react-display-name"));

  _pluginTransformReactDisplayName = function () {
    return data;
  };

  return data;
}

function _pluginTransformReactJsxSource() {
  const data = _interopRequireDefault(require("@babel/plugin-transform-react-jsx-source"));

  _pluginTransformReactJsxSource = function () {
    return data;
  };

  return data;
}

function _pluginTransformReactJsxSelf() {
  const data = _interopRequireDefault(require("@babel/plugin-transform-react-jsx-self"));

  _pluginTransformReactJsxSelf = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _helperPluginUtils().declare)((api, opts) => {
  api.assertVersion(7);
  const pragma = opts.pragma || "React.createElement";
  const pragmaFrag = opts.pragmaFrag || "React.Fragment";
  const throwIfNamespace = opts.throwIfNamespace === undefined ? true : !!opts.throwIfNamespace;
=======
var _helperPluginUtils = require("@babel/helper-plugin-utils");

var _pluginTransformReactJsx = _interopRequireDefault(require("@babel/plugin-transform-react-jsx"));

var _pluginTransformReactJsxDevelopment = _interopRequireDefault(require("@babel/plugin-transform-react-jsx-development"));

var _pluginTransformReactDisplayName = _interopRequireDefault(require("@babel/plugin-transform-react-display-name"));

var _pluginTransformReactJsxSource = _interopRequireDefault(require("@babel/plugin-transform-react-jsx-source"));

var _pluginTransformReactJsxSelf = _interopRequireDefault(require("@babel/plugin-transform-react-jsx-self"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _helperPluginUtils.declare)((api, opts) => {
  api.assertVersion(7);
  const {
    pragma,
    pragmaFrag,
    pure,
    throwIfNamespace = true,
    useSpread,
    runtime = "classic",
    importSource
  } = opts;
>>>>>>> master
  const development = !!opts.development;
  const useBuiltIns = !!opts.useBuiltIns;

  if (typeof development !== "boolean") {
    throw new Error("@babel/preset-react 'development' option must be a boolean.");
  }

<<<<<<< HEAD
  return {
    plugins: [[_pluginTransformReactJsx().default, {
      pragma,
      pragmaFrag,
      throwIfNamespace,
      useBuiltIns
    }], _pluginTransformReactDisplayName().default, development && _pluginTransformReactJsxSource().default, development && _pluginTransformReactJsxSelf().default].filter(Boolean)
=======
  const transformReactJSXPlugin = runtime === "automatic" && development ? _pluginTransformReactJsxDevelopment.default : _pluginTransformReactJsx.default;
  return {
    plugins: [[transformReactJSXPlugin, {
      importSource,
      pragma,
      pragmaFrag,
      runtime,
      throwIfNamespace,
      useBuiltIns,
      useSpread,
      pure
    }], _pluginTransformReactDisplayName.default, development && runtime === "classic" && _pluginTransformReactJsxSource.default, development && runtime === "classic" && _pluginTransformReactJsxSelf.default].filter(Boolean)
>>>>>>> master
  };
});

exports.default = _default;