<<<<<<< HEAD
import fs from 'fs';
import path from 'path';
import ExtractTextPlugin from 'extract-text-webpack-plugin';

export function readFileOrEmpty(path) {
  try {
    return fs.readFileSync(path, 'utf-8');
  } catch (e) {
    return '';
=======
import fs from "fs";
import path from "path";
import ExtractTextPlugin from "extract-text-webpack-plugin";

export function readFileOrEmpty(path) {
  try {
    return fs.readFileSync(path, "utf-8");
  } catch (e) {
    return "";
>>>>>>> master
  }
}

export const defaultConfig = {
<<<<<<< HEAD
  entry: './index',
=======
  entry: "./index",
>>>>>>> master
  module: {
    rules: [
      {
        test: /\.css$/,
        use: ExtractTextPlugin.extract({
<<<<<<< HEAD
          fallback: { loader: 'style-loader' },
          use: {
            loader: 'css-loader',
            options: { minimize: true }
          }
        })
      },
    ],
=======
          fallback: { loader: "style-loader" },
          use: {
            loader: "css-loader"
          }
        })
      }
    ]
>>>>>>> master
  },
  plugins: [],
  context: __dirname,
  output: {
<<<<<<< HEAD
    filename: 'destination.js',
    path: path.resolve(__dirname, '../', 'js', 'default-exports')
  }
};

export function checkForWebpackErrors({err, stats, done}) {
=======
    filename: "destination.js",
    path: path.resolve(__dirname, "../", "js", "default-exports")
  }
};

export function checkForWebpackErrors({ err, stats, done }) {
>>>>>>> master
  if (err) return done(err);
  if (stats.hasErrors()) return done(new Error(stats.toString()));
}
