/**
 * @fileoverview Enforce React components to have a shouldComponentUpdate method
 * @author Evgueni Naverniouk
 */
<<<<<<< HEAD
'use strict';

const has = require('has');
=======

'use strict';

>>>>>>> master
const Components = require('../util/Components');
const docsUrl = require('../util/docsUrl');

module.exports = {
  meta: {
    docs: {
      description: 'Enforce React components to have a shouldComponentUpdate method',
      category: 'Best Practices',
      recommended: false,
      url: docsUrl('require-optimization')
    },

    schema: [{
      type: 'object',
      properties: {
        allowDecorators: {
          type: 'array',
          items: {
            type: 'string'
          }
        }
      },
      additionalProperties: false
    }]
  },

  create: Components.detect((context, components, utils) => {
    const MISSING_MESSAGE = 'Component is not optimized. Please add a shouldComponentUpdate method.';
    const configuration = context.options[0] || {};
    const allowDecorators = configuration.allowDecorators || [];

    /**
     * Checks to see if our component is decorated by PureRenderMixin via reactMixin
     * @param {ASTNode} node The AST node being checked.
     * @returns {Boolean} True if node is decorated with a PureRenderMixin, false if not.
     */
<<<<<<< HEAD
    const hasPureRenderDecorator = function (node) {
=======
    function hasPureRenderDecorator(node) {
>>>>>>> master
      if (node.decorators && node.decorators.length) {
        for (let i = 0, l = node.decorators.length; i < l; i++) {
          if (
            node.decorators[i].expression &&
            node.decorators[i].expression.callee &&
            node.decorators[i].expression.callee.object &&
            node.decorators[i].expression.callee.object.name === 'reactMixin' &&
            node.decorators[i].expression.callee.property &&
            node.decorators[i].expression.callee.property.name === 'decorate' &&
            node.decorators[i].expression.arguments &&
            node.decorators[i].expression.arguments.length &&
            node.decorators[i].expression.arguments[0].name === 'PureRenderMixin'
          ) {
            return true;
          }
        }
      }

      return false;
<<<<<<< HEAD
    };
=======
    }
>>>>>>> master

    /**
     * Checks to see if our component is custom decorated
     * @param {ASTNode} node The AST node being checked.
     * @returns {Boolean} True if node is decorated name with a custom decorated, false if not.
     */
<<<<<<< HEAD
    const hasCustomDecorator = function (node) {
=======
    function hasCustomDecorator(node) {
>>>>>>> master
      const allowLength = allowDecorators.length;

      if (allowLength && node.decorators && node.decorators.length) {
        for (let i = 0; i < allowLength; i++) {
          for (let j = 0, l = node.decorators.length; j < l; j++) {
            if (
              node.decorators[j].expression &&
              node.decorators[j].expression.name === allowDecorators[i]
            ) {
              return true;
            }
          }
        }
      }

      return false;
<<<<<<< HEAD
    };
=======
    }
>>>>>>> master

    /**
     * Checks if we are declaring a shouldComponentUpdate method
     * @param {ASTNode} node The AST node being checked.
     * @returns {Boolean} True if we are declaring a shouldComponentUpdate method, false if not.
     */
<<<<<<< HEAD
    const isSCUDeclarеd = function (node) {
=======
    function isSCUDeclared(node) {
>>>>>>> master
      return Boolean(
        node &&
        node.name === 'shouldComponentUpdate'
      );
<<<<<<< HEAD
    };
=======
    }
>>>>>>> master

    /**
     * Checks if we are declaring a PureRenderMixin mixin
     * @param {ASTNode} node The AST node being checked.
     * @returns {Boolean} True if we are declaring a PureRenderMixin method, false if not.
     */
<<<<<<< HEAD
    const isPureRenderDeclared = function (node) {
=======
    function isPureRenderDeclared(node) {
>>>>>>> master
      let hasPR = false;
      if (node.value && node.value.elements) {
        for (let i = 0, l = node.value.elements.length; i < l; i++) {
          if (node.value.elements[i] && node.value.elements[i].name === 'PureRenderMixin') {
            hasPR = true;
            break;
          }
        }
      }

      return Boolean(
        node &&
        node.key.name === 'mixins' &&
        hasPR
      );
<<<<<<< HEAD
    };
=======
    }
>>>>>>> master

    /**
     * Mark shouldComponentUpdate as declared
     * @param {ASTNode} node The AST node being checked.
     */
<<<<<<< HEAD
    const markSCUAsDeclared = function (node) {
      components.set(node, {
        hasSCU: true
      });
    };
=======
    function markSCUAsDeclared(node) {
      components.set(node, {
        hasSCU: true
      });
    }
>>>>>>> master

    /**
     * Reports missing optimization for a given component
     * @param {Object} component The component to process
     */
<<<<<<< HEAD
    const reportMissingOptimization = function (component) {
=======
    function reportMissingOptimization(component) {
>>>>>>> master
      context.report({
        node: component.node,
        message: MISSING_MESSAGE,
        data: {
          component: component.name
        }
      });
<<<<<<< HEAD
    };
=======
    }
>>>>>>> master

    /**
     * Checks if we are declaring function in class
     * @returns {Boolean} True if we are declaring function in class, false if not.
     */
<<<<<<< HEAD
    const isFunctionInClass = function () {
=======
    function isFunctionInClass() {
>>>>>>> master
      let blockNode;
      let scope = context.getScope();
      while (scope) {
        blockNode = scope.block;
        if (blockNode && blockNode.type === 'ClassDeclaration') {
          return true;
        }
        scope = scope.upper;
      }

      return false;
<<<<<<< HEAD
    };

    return {
      ArrowFunctionExpression: function (node) {
=======
    }

    return {
      ArrowFunctionExpression(node) {
        // Skip if the function is declared in the class
        if (isFunctionInClass()) {
          return;
        }
>>>>>>> master
        // Stateless Functional Components cannot be optimized (yet)
        markSCUAsDeclared(node);
      },

<<<<<<< HEAD
      ClassDeclaration: function (node) {
=======
      ClassDeclaration(node) {
>>>>>>> master
        if (!(hasPureRenderDecorator(node) || hasCustomDecorator(node) || utils.isPureComponent(node))) {
          return;
        }
        markSCUAsDeclared(node);
      },

<<<<<<< HEAD
      FunctionDeclaration: function (node) {
=======
      FunctionDeclaration(node) {
>>>>>>> master
        // Skip if the function is declared in the class
        if (isFunctionInClass()) {
          return;
        }
        // Stateless Functional Components cannot be optimized (yet)
        markSCUAsDeclared(node);
      },

<<<<<<< HEAD
      FunctionExpression: function (node) {
=======
      FunctionExpression(node) {
>>>>>>> master
        // Skip if the function is declared in the class
        if (isFunctionInClass()) {
          return;
        }
        // Stateless Functional Components cannot be optimized (yet)
        markSCUAsDeclared(node);
      },

<<<<<<< HEAD
      MethodDefinition: function (node) {
        if (!isSCUDeclarеd(node.key)) {
=======
      MethodDefinition(node) {
        if (!isSCUDeclared(node.key)) {
>>>>>>> master
          return;
        }
        markSCUAsDeclared(node);
      },

<<<<<<< HEAD
      ObjectExpression: function (node) {
        // Search for the shouldComponentUpdate declaration
        for (let i = 0, l = node.properties.length; i < l; i++) {
          if (
            !node.properties[i].key || (
              !isSCUDeclarеd(node.properties[i].key) &&
              !isPureRenderDeclared(node.properties[i])
            )
          ) {
            continue;
          }
=======
      ObjectExpression(node) {
        // Search for the shouldComponentUpdate declaration
        const found = node.properties.some(property => (
          property.key &&
          (isSCUDeclared(property.key) || isPureRenderDeclared(property))
        ));
        if (found) {
>>>>>>> master
          markSCUAsDeclared(node);
        }
      },

<<<<<<< HEAD
      'Program:exit': function () {
        const list = components.list();

        // Report missing shouldComponentUpdate for all components
        for (const component in list) {
          if (!has(list, component) || list[component].hasSCU) {
            continue;
          }
          reportMissingOptimization(list[component]);
        }
=======
      'Program:exit'() {
        const list = components.list();

        // Report missing shouldComponentUpdate for all components
        Object.keys(list).filter(component => !list[component].hasSCU).forEach((component) => {
          reportMissingOptimization(list[component]);
        });
>>>>>>> master
      }
    };
  })
};
