/*
<<<<<<< HEAD
  Copyright 2017 Google Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
=======
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
>>>>>>> master
*/

const template = require('lodash.template');
const swTemplate = require('../templates/sw-template');

const errors = require('./errors');
const runtimeCachingConverter = require('./runtime-caching-converter');
const stringifyWithoutComments = require('./stringify-without-comments');

module.exports = ({
  cacheId,
<<<<<<< HEAD
  clientsClaim,
  directoryIndex,
  ignoreUrlParametersMatching,
=======
  cleanupOutdatedCaches,
  clientsClaim,
  directoryIndex,
  ignoreURLParametersMatching,
>>>>>>> master
  importScripts,
  manifestEntries,
  modulePathPrefix,
  navigateFallback,
  navigateFallbackBlacklist,
  navigateFallbackWhitelist,
<<<<<<< HEAD
=======
  navigationPreload,
>>>>>>> master
  offlineGoogleAnalytics,
  runtimeCaching,
  skipWaiting,
  workboxSWImport,
}) => {
  // These are all options that can be passed to the precacheAndRoute() method.
  const precacheOptions = {
    directoryIndex,
    // An array of RegExp objects can't be serialized by JSON.stringify()'s
    // default behavior, so if it's given, convert it manually.
<<<<<<< HEAD
    ignoreUrlParametersMatching: ignoreUrlParametersMatching ?
=======
    ignoreURLParametersMatching: ignoreURLParametersMatching ?
>>>>>>> master
      [] :
      undefined,
  };

  let precacheOptionsString = JSON.stringify(precacheOptions, null, 2);
<<<<<<< HEAD
  if (ignoreUrlParametersMatching) {
    precacheOptionsString = precacheOptionsString.replace(
      `"ignoreUrlParametersMatching": []`,
      `"ignoreUrlParametersMatching": [` +
      `${ignoreUrlParametersMatching.join(', ')}]`
=======
  if (ignoreURLParametersMatching) {
    precacheOptionsString = precacheOptionsString.replace(
        `"ignoreURLParametersMatching": []`,
        `"ignoreURLParametersMatching": [` +
      `${ignoreURLParametersMatching.join(', ')}]`
>>>>>>> master
    );
  }

  let offlineAnalyticsConfigString;
  if (offlineGoogleAnalytics) {
    // If offlineGoogleAnalytics is a truthy value, we need to convert it to the
    // format expected by the template.
    offlineAnalyticsConfigString = offlineGoogleAnalytics === true ?
      // If it's the literal value true, then use an empty config string.
      '{}' :
      // Otherwise, convert the config object into a more complex string, taking
      // into account the fact that functions might need to be stringified.
      stringifyWithoutComments(offlineGoogleAnalytics);
  }

  try {
    const populatedTemplate = template(swTemplate)({
      cacheId,
<<<<<<< HEAD
=======
      cleanupOutdatedCaches,
>>>>>>> master
      clientsClaim,
      importScripts,
      manifestEntries,
      modulePathPrefix,
      navigateFallback,
      navigateFallbackBlacklist,
      navigateFallbackWhitelist,
<<<<<<< HEAD
=======
      navigationPreload,
>>>>>>> master
      offlineAnalyticsConfigString,
      precacheOptionsString,
      skipWaiting,
      runtimeCaching: runtimeCachingConverter(runtimeCaching),
      workboxSWImport,
    });

    // Clean up multiple blank lines.
    return populatedTemplate.replace(/\n{3,}/g, '\n\n').trim() + '\n';
  } catch (error) {
    throw new Error(
<<<<<<< HEAD
      `${errors['populating-sw-tmpl-failed']} '${error.message}'`);
=======
        `${errors['populating-sw-tmpl-failed']} '${error.message}'`);
>>>>>>> master
  }
};
