/*
<<<<<<< HEAD
  Copyright 2017 Google Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

import {logger} from 'workbox-core/_private/logger.mjs';
=======
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/

import {logger} from 'workbox-core/_private/logger.mjs';

>>>>>>> master
import '../_version.mjs';

/**
 * @param {string} groupTitle
<<<<<<< HEAD
 * @param {Array<PrecacheEntry>} entries
 *
 * @private
 */
const _nestedGroup = (groupTitle, entries) => {
  if (entries.length === 0) {
=======
 * @param {Array<string>} urls
 *
 * @private
 */
function _nestedGroup(groupTitle, urls) {
  if (urls.length === 0) {
>>>>>>> master
    return;
  }

  logger.groupCollapsed(groupTitle);

<<<<<<< HEAD
  entries.forEach((entry) => {
    logger.log(entry._originalInput);
  });

  logger.groupEnd();
};

/**
 * @param {Array<Object>} entriesToPrecache
 * @param {Array<Object>} alreadyPrecachedEntries
 *
 * @private
 * @memberof module:workbox-precachig
 */
export default (entriesToPrecache, alreadyPrecachedEntries) => {
  // Goal is to print the message:
  //    Precaching X files.
  // Or:
  //    Precaching X files. Y files were cached and up-to-date.

  const precachedCount = entriesToPrecache.length;
  const alreadyPrecachedCount = alreadyPrecachedEntries.length;
  let printText =
    `Precaching ${precachedCount} file${precachedCount === 1 ? '' : 's'}.`;
  if (alreadyPrecachedCount > 0) {
    printText += ` ${alreadyPrecachedCount} ` +
      `file${alreadyPrecachedCount === 1 ? ' is' : 's are'} already cached.`;
  }

  logger.groupCollapsed(printText);

  _nestedGroup(
    `View precached URLs.`,
    entriesToPrecache);
  _nestedGroup(
    `View URLs that were already precached.`,
    alreadyPrecachedEntries);
  logger.groupEnd();
};
=======
  for (const url of urls) {
    logger.log(url);
  }

  logger.groupEnd();
}

/**
 * @param {Array<string>} urlsToPrecache
 * @param {Array<string>} urlsAlreadyPrecached
 *
 * @private
 * @memberof module:workbox-precaching
 */
export function printInstallDetails(urlsToPrecache, urlsAlreadyPrecached) {
  const precachedCount = urlsToPrecache.length;
  const alreadyPrecachedCount = urlsAlreadyPrecached.length;

  if (precachedCount || alreadyPrecachedCount) {
    let message =
        `Precaching ${precachedCount} file${precachedCount === 1 ? '' : 's'}.`;

    if (alreadyPrecachedCount > 0) {
      message += ` ${alreadyPrecachedCount} ` +
        `file${alreadyPrecachedCount === 1 ? ' is' : 's are'} already cached.`;
    }

    logger.groupCollapsed(message);

    _nestedGroup(`View newly precached URLs.`, urlsToPrecache);
    _nestedGroup(`View previously precached URLs.`, urlsAlreadyPrecached);
    logger.groupEnd();
  }
}
>>>>>>> master
